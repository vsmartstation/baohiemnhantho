from flask import Blueprint, request, jsonify
from flask_cors import cross_origin
import json
import re

chatbot_bp = Blueprint('chatbot', __name__)

class InsuranceChatbot:
    def __init__(self):
        self.knowledge_base = {
            "basic_concepts": {
                "b·∫£o hi·ªÉm nh√¢n th·ªç": "B·∫£o hi·ªÉm nh√¢n th·ªç l√† h·ª£p ƒë·ªìng gi·ªØa b·∫°n v√† c√¥ng ty b·∫£o hi·ªÉm, trong ƒë√≥ c√¥ng ty cam k·∫øt chi tr·∫£ m·ªôt kho·∫£n ti·ªÅn cho ng∆∞·ªùi th·ª• h∆∞·ªüng khi b·∫°n qua ƒë·ªùi ho·∫∑c khi h·ª£p ƒë·ªìng ƒë√°o h·∫°n.",
                "ph√≠ b·∫£o hi·ªÉm": "Ph√≠ b·∫£o hi·ªÉm l√† s·ªë ti·ªÅn b·∫°n ph·∫£i ƒë√≥ng ƒë·ªãnh k·ª≥ (h√†ng th√°ng, qu√Ω, nƒÉm) ƒë·ªÉ duy tr√¨ h·ª£p ƒë·ªìng b·∫£o hi·ªÉm.",
                "s·ªë ti·ªÅn b·∫£o hi·ªÉm": "S·ªë ti·ªÅn b·∫£o hi·ªÉm l√† kho·∫£n ti·ªÅn m√† c√¥ng ty b·∫£o hi·ªÉm s·∫Ω chi tr·∫£ cho ng∆∞·ªùi th·ª• h∆∞·ªüng khi x·∫£y ra s·ª± ki·ªán b·∫£o hi·ªÉm.",
                "ng∆∞·ªùi th·ª• h∆∞·ªüng": "Ng∆∞·ªùi th·ª• h∆∞·ªüng l√† ng∆∞·ªùi ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ƒë·ªÉ nh·∫≠n s·ªë ti·ªÅn b·∫£o hi·ªÉm khi b·∫°n qua ƒë·ªùi.",
                "gi√° tr·ªã ho√†n l·∫°i": "Gi√° tr·ªã ho√†n l·∫°i l√† s·ªë ti·ªÅn b·∫°n c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c n·∫øu ch·∫•m d·ª©t h·ª£p ƒë·ªìng b·∫£o hi·ªÉm tr∆∞·ªõc th·ªùi h·∫°n."
            },
            "insurance_types": {
                "b·∫£o hi·ªÉm nh√¢n th·ªç truy·ªÅn th·ªëng": {
                    "description": "Lo·∫°i b·∫£o hi·ªÉm c∆° b·∫£n nh·∫•t, t·∫≠p trung v√†o b·∫£o v·ªá t√†i ch√≠nh cho gia ƒë√¨nh khi ng∆∞·ªùi ƒë∆∞·ª£c b·∫£o hi·ªÉm qua ƒë·ªùi.",
                    "pros": ["Ph√≠ b·∫£o hi·ªÉm th·∫•p", "ƒê∆°n gi·∫£n, d·ªÖ hi·ªÉu", "B·∫£o v·ªá t√†i ch√≠nh hi·ªáu qu·∫£"],
                    "cons": ["Kh√¥ng c√≥ gi√° tr·ªã ƒë·∫ßu t∆∞", "Kh√¥ng ho√†n l·∫°i ph√≠ n·∫øu kh√¥ng c√≥ s·ª± c·ªë"],
                    "suitable_for": "Ng∆∞·ªùi tr·∫ª, thu nh·∫≠p h·∫°n ch·∫ø, c·∫ßn b·∫£o v·ªá t√†i ch√≠nh c∆° b·∫£n"
                },
                "b·∫£o hi·ªÉm nh√¢n th·ªç ƒë·∫ßu t∆∞": {
                    "description": "K·∫øt h·ª£p b·∫£o hi·ªÉm v√† ƒë·∫ßu t∆∞, m·ªôt ph·∫ßn ph√≠ b·∫£o hi·ªÉm ƒë∆∞·ª£c ƒë·∫ßu t∆∞ v√†o c√°c qu·ªπ.",
                    "pros": ["C√≥ kh·∫£ nƒÉng sinh l·ªùi", "Linh ho·∫°t trong ƒë·∫ßu t∆∞", "C√≥ th·ªÉ r√∫t ti·ªÅn khi c·∫ßn"],
                    "cons": ["Ph√≠ cao h∆°n", "R·ªßi ro ƒë·∫ßu t∆∞", "Ph·ª©c t·∫°p h∆°n"],
                    "suitable_for": "Ng∆∞·ªùi c√≥ thu nh·∫≠p ·ªïn ƒë·ªãnh, hi·ªÉu bi·∫øt v·ªÅ ƒë·∫ßu t∆∞"
                },
                "b·∫£o hi·ªÉm nh√¢n th·ªç h·ªón h·ª£p": {
                    "description": "K·∫øt h·ª£p b·∫£o v·ªá v√† t√≠ch l≈©y, c√≥ gi√° tr·ªã ho√†n l·∫°i khi ƒë√°o h·∫°n.",
                    "pros": ["V·ª´a b·∫£o v·ªá v·ª´a t√≠ch l≈©y", "C√≥ gi√° tr·ªã ho√†n l·∫°i", "·ªîn ƒë·ªãnh"],
                    "cons": ["Ph√≠ cao h∆°n b·∫£o hi·ªÉm truy·ªÅn th·ªëng", "L·ª£i nhu·∫≠n th·∫•p"],
                    "suitable_for": "Ng∆∞·ªùi mu·ªën v·ª´a b·∫£o v·ªá v·ª´a ti·∫øt ki·ªám"
                }
            },
            "calculation_guide": {
                "income_multiple": "M·ª©c b·∫£o hi·ªÉm khuy·∫øn ngh·ªã = 5-10 l·∫ßn thu nh·∫≠p h√†ng nƒÉm",
                "debt_coverage": "C·∫ßn t√≠nh th√™m c√°c kho·∫£n n·ª£ hi·ªán t·∫°i (vay nh√†, vay xe, th·∫ª t√≠n d·ª•ng)",
                "family_expenses": "Chi ph√≠ sinh ho·∫°t gia ƒë√¨nh trong 5-10 nƒÉm t·ªõi",
                "education_fund": "Qu·ªπ gi√°o d·ª•c cho con (n·∫øu c√≥)",
                "emergency_fund": "Qu·ªπ kh·∫©n c·∫•p 6-12 th√°ng chi ph√≠ sinh ho·∫°t"
            }
        }
        
        self.conversation_starters = [
            "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n b·∫£o hi·ªÉm nh√¢n th·ªç mi·ªÖn ph√≠. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:",
            "‚Ä¢ Hi·ªÉu c√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç",
            "‚Ä¢ T√≠nh to√°n nhu c·∫ßu b·∫£o hi·ªÉm ph√π h·ª£p",
            "‚Ä¢ So s√°nh c√°c lo·∫°i b·∫£o hi·ªÉm kh√°c nhau",
            "‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ quy tr√¨nh v√† ƒëi·ªÅu kho·∫£n",
            "",
            "B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ ƒëi·ªÅu g√¨? Ho·∫∑c b·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç!"
        ]

    def get_response(self, user_message, conversation_history=None):
        user_message = user_message.lower().strip()
        
        # Greeting responses
        if any(greeting in user_message for greeting in ["xin ch√†o", "hello", "hi", "ch√†o"]):
            return "\n".join(self.conversation_starters)
        
        # Basic concept explanations
        for concept, explanation in self.knowledge_base["basic_concepts"].items():
            if concept in user_message:
                return f"**{concept.title()}:**\n\n{explanation}\n\nB·∫°n c√≥ mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ kh√°i ni·ªám n√†o kh√°c kh√¥ng?"
        
        # Insurance type comparisons
        if any(keyword in user_message for keyword in ["so s√°nh", "lo·∫°i b·∫£o hi·ªÉm", "kh√°c nhau", "n√™n ch·ªçn"]):
            return self._compare_insurance_types()
        
        # Need calculation
        if any(keyword in user_message for keyword in ["t√≠nh to√°n", "nhu c·∫ßu", "bao nhi√™u", "m·ª©c b·∫£o hi·ªÉm"]):
            return self._guide_calculation()
        
        # Age and income based advice
        age_match = re.search(r'(\d+)\s*tu·ªïi', user_message)
        income_match = re.search(r'(\d+)\s*(tri·ªáu|tr)', user_message)
        
        if age_match or income_match:
            return self._personalized_advice(age_match, income_match, user_message)
        
        # General advice
        if any(keyword in user_message for keyword in ["t∆∞ v·∫•n", "n√™n mua", "b·∫Øt ƒë·∫ßu", "kh√¥ng bi·∫øt"]):
            return self._general_advice()
        
        # Default response
        return self._default_response()
    
    def _compare_insurance_types(self):
        response = "**So s√°nh c√°c lo·∫°i b·∫£o hi·ªÉm nh√¢n th·ªç:**\n\n"
        
        for insurance_type, details in self.knowledge_base["insurance_types"].items():
            response += f"**{insurance_type.title()}:**\n"
            response += f"{details['description']}\n"
            response += f"‚úÖ ∆Øu ƒëi·ªÉm: {', '.join(details['pros'])}\n"
            response += f"‚ùå Nh∆∞·ª£c ƒëi·ªÉm: {', '.join(details['cons'])}\n"
            response += f"üë• Ph√π h·ª£p: {details['suitable_for']}\n\n"
        
        response += "B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n c·ª• th·ªÉ d·ª±a tr√™n t√¨nh h√¨nh c·ªßa b·∫°n kh√¥ng?"
        return response
    
    def _guide_calculation(self):
        return """**H∆∞·ªõng d·∫´n t√≠nh to√°n nhu c·∫ßu b·∫£o hi·ªÉm:**

**C√¥ng th·ª©c c∆° b·∫£n:**
‚Ä¢ M·ª©c b·∫£o hi·ªÉm = 5-10 l·∫ßn thu nh·∫≠p h√†ng nƒÉm

**C√°c y·∫øu t·ªë c·∫ßn t√≠nh th√™m:**
‚Ä¢ C√°c kho·∫£n n·ª£ hi·ªán t·∫°i (vay nh√†, xe, th·∫ª t√≠n d·ª•ng)
‚Ä¢ Chi ph√≠ sinh ho·∫°t gia ƒë√¨nh trong 5-10 nƒÉm
‚Ä¢ Qu·ªπ gi√°o d·ª•c cho con (n·∫øu c√≥)
‚Ä¢ Qu·ªπ kh·∫©n c·∫•p (6-12 th√°ng chi ph√≠)

**V√≠ d·ª•:**
Thu nh·∫≠p: 20 tri·ªáu/th√°ng = 240 tri·ªáu/nƒÉm
M·ª©c b·∫£o hi·ªÉm khuy·∫øn ngh·ªã: 1.2 - 2.4 t·ª∑ ƒë·ªìng

B·∫°n c√≥ th·ªÉ chia s·∫ª thu nh·∫≠p v√† t√¨nh h√¨nh gia ƒë√¨nh ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n kh√¥ng?"""
    
    def _personalized_advice(self, age_match, income_match, user_message):
        age = int(age_match.group(1)) if age_match else None
        income = int(income_match.group(1)) if income_match else None
        
        response = "**T∆∞ v·∫•n c√° nh√¢n h√≥a:**\n\n"
        
        if age:
            response += f"**V·ªõi ƒë·ªô tu·ªïi {age}:**\n"
            if age < 30:
                response += "‚Ä¢ ∆Øu ti√™n b·∫£o hi·ªÉm nh√¢n th·ªç truy·ªÅn th·ªëng (ph√≠ th·∫•p)\n"
                response += "‚Ä¢ T·∫≠p trung x√¢y d·ª±ng n·ªÅn t·∫£ng t√†i ch√≠nh\n"
            elif age < 45:
                response += "‚Ä¢ C√≥ th·ªÉ c√¢n nh·∫Øc b·∫£o hi·ªÉm h·ªón h·ª£p\n"
                response += "‚Ä¢ C√¢n b·∫±ng gi·ªØa b·∫£o v·ªá v√† t√≠ch l≈©y\n"
            else:
                response += "‚Ä¢ N√™n ∆∞u ti√™n b·∫£o hi·ªÉm c√≥ gi√° tr·ªã ho√†n l·∫°i\n"
                response += "‚Ä¢ Chu·∫©n b·ªã cho giai ƒëo·∫°n ngh·ªâ h∆∞u\n"
        
        if income:
            annual_income = income * 12
            min_coverage = annual_income * 5
            max_coverage = annual_income * 10
            response += f"\n**V·ªõi thu nh·∫≠p {income} tri·ªáu/th√°ng:**\n"
            response += f"‚Ä¢ Thu nh·∫≠p nƒÉm: {annual_income} tri·ªáu\n"
            response += f"‚Ä¢ M·ª©c b·∫£o hi·ªÉm khuy·∫øn ngh·ªã: {min_coverage/1000:.1f} - {max_coverage/1000:.1f} t·ª∑ ƒë·ªìng\n"
        
        response += "\nB·∫°n c√≥ gia ƒë√¨nh (v·ª£/ch·ªìng, con) ch∆∞a? ƒêi·ªÅu n√†y s·∫Ω ·∫£nh h∆∞·ªüng ƒë·∫øn m·ª©c b·∫£o hi·ªÉm c·∫ßn thi·∫øt."
        
        return response
    
    def _general_advice(self):
        return """**L·ªùi khuy√™n chung v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç:**

**Khi n√†o n√™n mua:**
‚Ä¢ C√†ng s·ªõm c√†ng t·ªët (ph√≠ th·∫•p h∆°n)
‚Ä¢ Khi c√≥ ng∆∞·ªùi ph·ª• thu·ªôc t√†i ch√≠nh
‚Ä¢ Khi c√≥ thu nh·∫≠p ·ªïn ƒë·ªãnh

**Nguy√™n t·∫Øc v√†ng:**
‚Ä¢ Mua s·ªõm, mua ƒë·ªß, mua ƒë√∫ng
‚Ä¢ ∆Øu ti√™n b·∫£o v·ªá tr∆∞·ªõc, ƒë·∫ßu t∆∞ sau
‚Ä¢ ƒê·ªçc k·ªπ ƒëi·ªÅu kho·∫£n tr∆∞·ªõc khi k√Ω

**L∆∞u √Ω quan tr·ªçng:**
‚Ä¢ Khai b√°o s·ª©c kh·ªèe trung th·ª±c
‚Ä¢ L·ª±a ch·ªçn c√¥ng ty uy t√≠n
‚Ä¢ Xem x√©t kh·∫£ nƒÉng t√†i ch√≠nh d√†i h·∫°n

B·∫°n ƒëang ·ªü giai ƒëo·∫°n n√†o trong cu·ªôc ƒë·ªùi? T√¥i c√≥ th·ªÉ t∆∞ v·∫•n c·ª• th·ªÉ h∆°n."""
    
    def _default_response(self):
        return """T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:

‚Ä¢ **Kh√°i ni·ªám c∆° b·∫£n:** "B·∫£o hi·ªÉm nh√¢n th·ªç l√† g√¨?"
‚Ä¢ **T√≠nh to√°n nhu c·∫ßu:** "T√¥i c·∫ßn mua b·∫£o hi·ªÉm bao nhi√™u?"
‚Ä¢ **So s√°nh s·∫£n ph·∫©m:** "Lo·∫°i b·∫£o hi·ªÉm n√†o ph√π h·ª£p v·ªõi t√¥i?"
‚Ä¢ **T∆∞ v·∫•n c√° nh√¢n:** "T√¥i 30 tu·ªïi, thu nh·∫≠p 20 tri·ªáu, n√™n mua g√¨?"

Ho·∫∑c b·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ kh√°c v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç!"""

# Initialize chatbot
chatbot = InsuranceChatbot()

@chatbot_bp.route('/chat', methods=['POST'])
@cross_origin()
def chat():
    try:
        data = request.get_json()
        user_message = data.get('message', '')
        conversation_history = data.get('history', [])
        
        if not user_message:
            return jsonify({'error': 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}), 400
        
        response = chatbot.get_response(user_message, conversation_history)
        
        return jsonify({
            'response': response,
            'timestamp': str(int(__import__('time').time()))
        })
    
    except Exception as e:
        return jsonify({'error': f'L·ªói x·ª≠ l√Ω: {str(e)}'}), 500

@chatbot_bp.route('/health', methods=['GET'])
@cross_origin()
def health():
    return jsonify({'status': 'healthy', 'service': 'Insurance Chatbot'})

