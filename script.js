class ChatWidget {
    constructor() {
        this.isOpen = false;
        this.conversationHistory = [];
        this.apiBaseUrl = window.location.origin + '/api';
        
        this.initializeElements();
        this.bindEvents();
        this.addDemoContent();
    }

    initializeElements() {
        this.chatButton = document.getElementById('chat-widget-button');
        this.chatWidget = document.getElementById('chat-widget');
        this.chatClose = document.getElementById('chat-close');
        this.chatMessages = document.getElementById('chat-messages');
        this.chatInput = document.getElementById('chat-input');
        this.chatSend = document.getElementById('chat-send');
        this.loadingOverlay = document.getElementById('loading-overlay');
        this.quickQuestions = document.querySelectorAll('.quick-question');
    }

    bindEvents() {
        this.chatButton.addEventListener('click', () => this.toggleChat());
        this.chatClose.addEventListener('click', () => this.closeChat());
        this.chatSend.addEventListener('click', () => this.sendMessage());
        this.chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.sendMessage();
            }
        });

        // Quick questions
        this.quickQuestions.forEach(button => {
            button.addEventListener('click', () => {
                const question = button.getAttribute('data-question');
                this.chatInput.value = question;
                this.sendMessage();
            });
        });

        // Close chat when clicking outside
        document.addEventListener('click', (e) => {
            if (this.isOpen && 
                !this.chatWidget.contains(e.target) && 
                !this.chatButton.contains(e.target)) {
                this.closeChat();
            }
        });
    }

    addDemoContent() {
        // Add demo content to body if not exists
        if (!document.querySelector('.demo-content')) {
            const demoContent = document.createElement('div');
            demoContent.className = 'demo-content';
            demoContent.innerHTML = `
                <h1>Chatbot T∆∞ V·∫•n B·∫£o Hi·ªÉm Nh√¢n Th·ªç</h1>
                <p>Tr·ª£ l√Ω AI mi·ªÖn ph√≠ gi√∫p b·∫°n hi·ªÉu r√µ v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç v√† ƒë∆∞a ra t∆∞ v·∫•n kh√°ch quan</p>
                
                <div class="demo-features">
                    <div class="feature-card">
                        <h3>üéØ T∆∞ V·∫•n C√° Nh√¢n H√≥a</h3>
                        <p>Ph√¢n t√≠ch nhu c·∫ßu d·ª±a tr√™n t√¨nh h√¨nh t√†i ch√≠nh v√† gia ƒë√¨nh c·ªßa b·∫°n</p>
                    </div>
                    <div class="feature-card">
                        <h3>üìö Ki·∫øn Th·ª©c Minh B·∫°ch</h3>
                        <p>Gi·∫£i th√≠ch c√°c kh√°i ni·ªám b·∫£o hi·ªÉm m·ªôt c√°ch d·ªÖ hi·ªÉu v√† kh√°ch quan</p>
                    </div>
                    <div class="feature-card">
                        <h3>üîí Ho√†n To√†n Mi·ªÖn Ph√≠</h3>
                        <p>Kh√¥ng b√°n h√†ng, ch·ªâ t∆∞ v·∫•n v√† gi√°o d·ª•c v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç</p>
                    </div>
                </div>
            `;
            document.body.insertBefore(demoContent, document.body.firstChild);
        }
    }

    toggleChat() {
        if (this.isOpen) {
            this.closeChat();
        } else {
            this.openChat();
        }
    }

    openChat() {
        this.isOpen = true;
        this.chatWidget.classList.add('open');
        this.chatButton.style.display = 'none';
        this.chatInput.focus();
    }

    closeChat() {
        this.isOpen = false;
        this.chatWidget.classList.remove('open');
        this.chatButton.style.display = 'flex';
    }

    async sendMessage() {
        const message = this.chatInput.value.trim();
        if (!message) return;

        // Disable input
        this.chatInput.disabled = true;
        this.chatSend.disabled = true;

        // Add user message
        this.addMessage(message, 'user');
        this.chatInput.value = '';

        // Show typing indicator
        this.showTypingIndicator();

        try {
            // Send to API
            const response = await this.callChatAPI(message);
            
            // Remove typing indicator
            this.hideTypingIndicator();
            
            // Add bot response
            this.addMessage(response.response, 'bot');
            
            // Update conversation history
            this.conversationHistory.push(
                { role: 'user', content: message },
                { role: 'bot', content: response.response }
            );

        } catch (error) {
            console.error('Chat API Error:', error);
            this.hideTypingIndicator();
            this.addMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
        } finally {
            // Re-enable input
            this.chatInput.disabled = false;
            this.chatSend.disabled = false;
            this.chatInput.focus();
        }
    }

    async callChatAPI(message) {
        // For demo purposes, return mock response if API is not available
        try {
            const response = await fetch(`${this.apiBaseUrl}/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: message,
                    history: this.conversationHistory
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            return await response.json();
        } catch (error) {
            console.warn('API not available, using mock response:', error);
            return this.getMockResponse(message);
        }
    }

    getMockResponse(message) {
        const lowerMessage = message.toLowerCase();
        
        if (lowerMessage.includes('xin ch√†o') || lowerMessage.includes('hello')) {
            return {
                response: `Xin ch√†o! T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n b·∫£o hi·ªÉm nh√¢n th·ªç mi·ªÖn ph√≠. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:

‚Ä¢ Hi·ªÉu c√°c kh√°i ni·ªám c∆° b·∫£n v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç
‚Ä¢ T√≠nh to√°n nhu c·∫ßu b·∫£o hi·ªÉm ph√π h·ª£p
‚Ä¢ So s√°nh c√°c lo·∫°i b·∫£o hi·ªÉm kh√°c nhau
‚Ä¢ Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ quy tr√¨nh v√† ƒëi·ªÅu kho·∫£n

B·∫°n mu·ªën t√¨m hi·ªÉu v·ªÅ ƒëi·ªÅu g√¨? Ho·∫∑c b·∫°n c√≥ th·ªÉ h·ªèi t√¥i b·∫•t k·ª≥ c√¢u h·ªèi n√†o v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç!`
            };
        }
        
        if (lowerMessage.includes('b·∫£o hi·ªÉm nh√¢n th·ªç l√† g√¨')) {
            return {
                response: `**B·∫£o hi·ªÉm nh√¢n th·ªç:**

B·∫£o hi·ªÉm nh√¢n th·ªç l√† h·ª£p ƒë·ªìng gi·ªØa b·∫°n v√† c√¥ng ty b·∫£o hi·ªÉm, trong ƒë√≥ c√¥ng ty cam k·∫øt chi tr·∫£ m·ªôt kho·∫£n ti·ªÅn cho ng∆∞·ªùi th·ª• h∆∞·ªüng khi b·∫°n qua ƒë·ªùi ho·∫∑c khi h·ª£p ƒë·ªìng ƒë√°o h·∫°n.

**M·ª•c ƒë√≠ch ch√≠nh:**
‚Ä¢ B·∫£o v·ªá t√†i ch√≠nh cho gia ƒë√¨nh khi b·∫°n kh√¥ng c√≤n
‚Ä¢ ƒê·∫£m b·∫£o cu·ªôc s·ªëng c·ªßa ng∆∞·ªùi th√¢n kh√¥ng b·ªã ·∫£nh h∆∞·ªüng
‚Ä¢ C√≥ th·ªÉ k·∫øt h·ª£p v·ªõi t√≠ch l≈©y v√† ƒë·∫ßu t∆∞

B·∫°n c√≥ mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ c√°c lo·∫°i b·∫£o hi·ªÉm nh√¢n th·ªç kh√¥ng?`
            };
        }
        
        if (lowerMessage.includes('nhu c·∫ßu') || lowerMessage.includes('bao nhi√™u')) {
            return {
                response: `**H∆∞·ªõng d·∫´n t√≠nh to√°n nhu c·∫ßu b·∫£o hi·ªÉm:**

**C√¥ng th·ª©c c∆° b·∫£n:**
‚Ä¢ M·ª©c b·∫£o hi·ªÉm = 5-10 l·∫ßn thu nh·∫≠p h√†ng nƒÉm

**C√°c y·∫øu t·ªë c·∫ßn t√≠nh th√™m:**
‚Ä¢ C√°c kho·∫£n n·ª£ hi·ªán t·∫°i (vay nh√†, xe, th·∫ª t√≠n d·ª•ng)
‚Ä¢ Chi ph√≠ sinh ho·∫°t gia ƒë√¨nh trong 5-10 nƒÉm
‚Ä¢ Qu·ªπ gi√°o d·ª•c cho con (n·∫øu c√≥)
‚Ä¢ Qu·ªπ kh·∫©n c·∫•p (6-12 th√°ng chi ph√≠)

**V√≠ d·ª•:**
Thu nh·∫≠p: 20 tri·ªáu/th√°ng = 240 tri·ªáu/nƒÉm
M·ª©c b·∫£o hi·ªÉm khuy·∫øn ngh·ªã: 1.2 - 2.4 t·ª∑ ƒë·ªìng

B·∫°n c√≥ th·ªÉ chia s·∫ª thu nh·∫≠p v√† t√¨nh h√¨nh gia ƒë√¨nh ƒë·ªÉ t√¥i t∆∞ v·∫•n c·ª• th·ªÉ h∆°n kh√¥ng?`
            };
        }
        
        if (lowerMessage.includes('so s√°nh') || lowerMessage.includes('lo·∫°i')) {
            return {
                response: `**So s√°nh c√°c lo·∫°i b·∫£o hi·ªÉm nh√¢n th·ªç:**

**B·∫£o hi·ªÉm nh√¢n th·ªç truy·ªÅn th·ªëng:**
Lo·∫°i b·∫£o hi·ªÉm c∆° b·∫£n nh·∫•t, t·∫≠p trung v√†o b·∫£o v·ªá t√†i ch√≠nh cho gia ƒë√¨nh khi ng∆∞·ªùi ƒë∆∞·ª£c b·∫£o hi·ªÉm qua ƒë·ªùi.
‚úÖ ∆Øu ƒëi·ªÉm: Ph√≠ b·∫£o hi·ªÉm th·∫•p, ƒê∆°n gi·∫£n d·ªÖ hi·ªÉu, B·∫£o v·ªá t√†i ch√≠nh hi·ªáu qu·∫£
‚ùå Nh∆∞·ª£c ƒëi·ªÉm: Kh√¥ng c√≥ gi√° tr·ªã ƒë·∫ßu t∆∞, Kh√¥ng ho√†n l·∫°i ph√≠ n·∫øu kh√¥ng c√≥ s·ª± c·ªë
üë• Ph√π h·ª£p: Ng∆∞·ªùi tr·∫ª, thu nh·∫≠p h·∫°n ch·∫ø, c·∫ßn b·∫£o v·ªá t√†i ch√≠nh c∆° b·∫£n

**B·∫£o hi·ªÉm nh√¢n th·ªç ƒë·∫ßu t∆∞:**
K·∫øt h·ª£p b·∫£o hi·ªÉm v√† ƒë·∫ßu t∆∞, m·ªôt ph·∫ßn ph√≠ b·∫£o hi·ªÉm ƒë∆∞·ª£c ƒë·∫ßu t∆∞ v√†o c√°c qu·ªπ.
‚úÖ ∆Øu ƒëi·ªÉm: C√≥ kh·∫£ nƒÉng sinh l·ªùi, Linh ho·∫°t trong ƒë·∫ßu t∆∞, C√≥ th·ªÉ r√∫t ti·ªÅn khi c·∫ßn
‚ùå Nh∆∞·ª£c ƒëi·ªÉm: Ph√≠ cao h∆°n, R·ªßi ro ƒë·∫ßu t∆∞, Ph·ª©c t·∫°p h∆°n
üë• Ph√π h·ª£p: Ng∆∞·ªùi c√≥ thu nh·∫≠p ·ªïn ƒë·ªãnh, hi·ªÉu bi·∫øt v·ªÅ ƒë·∫ßu t∆∞

B·∫°n c√≥ mu·ªën t√¥i t∆∞ v·∫•n c·ª• th·ªÉ d·ª±a tr√™n t√¨nh h√¨nh c·ªßa b·∫°n kh√¥ng?`
            };
        }
        
        return {
            response: `T√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ:

‚Ä¢ **Kh√°i ni·ªám c∆° b·∫£n:** "B·∫£o hi·ªÉm nh√¢n th·ªç l√† g√¨?"
‚Ä¢ **T√≠nh to√°n nhu c·∫ßu:** "T√¥i c·∫ßn mua b·∫£o hi·ªÉm bao nhi√™u?"
‚Ä¢ **So s√°nh s·∫£n ph·∫©m:** "Lo·∫°i b·∫£o hi·ªÉm n√†o ph√π h·ª£p v·ªõi t√¥i?"
‚Ä¢ **T∆∞ v·∫•n c√° nh√¢n:** "T√¥i 30 tu·ªïi, thu nh·∫≠p 20 tri·ªáu, n√™n mua g√¨?"

Ho·∫∑c b·∫°n c√≥ th·ªÉ ƒë·∫∑t c√¢u h·ªèi c·ª• th·ªÉ kh√°c v·ªÅ b·∫£o hi·ªÉm nh√¢n th·ªç!`
        };
    }

    addMessage(content, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const avatarDiv = document.createElement('div');
        avatarDiv.className = 'message-avatar';
        
        if (sender === 'bot') {
            avatarDiv.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            `;
        } else {
            avatarDiv.innerHTML = `
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            `;
        }
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message-content';
        
        // Format content with basic markdown support
        const formattedContent = this.formatMessage(content);
        contentDiv.innerHTML = formattedContent;
        
        messageDiv.appendChild(avatarDiv);
        messageDiv.appendChild(contentDiv);
        
        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }

    formatMessage(content) {
        // Basic markdown formatting
        return content
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/^(.*)$/g, '<p>$1</p>')
            .replace(/‚Ä¢ (.*?)(<br>|$)/g, '<li>$1</li>')
            .replace(/(<li>.*<\/li>)/g, '<ul>$1</ul>')
            .replace(/<\/ul><ul>/g, '');
    }

    showTypingIndicator() {
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message typing-message';
        typingDiv.innerHTML = `
            <div class="message-avatar">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <circle cx="12" cy="7" r="4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
            </div>
            <div class="message-content">
                <div class="typing-indicator">
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                    <div class="typing-dot"></div>
                </div>
            </div>
        `;
        
        this.chatMessages.appendChild(typingDiv);
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        const typingMessage = this.chatMessages.querySelector('.typing-message');
        if (typingMessage) {
            typingMessage.remove();
        }
    }

    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }
}

// Initialize chat widget when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new ChatWidget();
});

